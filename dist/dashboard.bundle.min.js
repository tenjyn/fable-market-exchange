let cachedData; function loadPortfolioData() { if (cachedData) { return cachedData; } try { const raw = localStorage.getItem("fablePortfolio"); const saved = raw ? JSON.parse(raw) : {}; const portfolio = {}; const savedPortfolio = saved.portfolio || {}; for (const code in savedPortfolio) { const entry = savedPortfolio[code]; portfolio[code] = typeof entry === "number" ? { units: entry, avgCost: 0 } : entry; } cachedData = { marks: saved.marks || 1000, portfolio, tradeHistory: saved.tradeHistory || [] }; return cachedData; } catch (e) { console.error("Failed to parse portfolio from localStorage", e); localStorage.removeItem("fablePortfolio"); cachedData = { marks: 1000, portfolio: {}, tradeHistory: [] }; return cachedData; } } function savePortfolioData(data) { localStorage.setItem("fablePortfolio", JSON.stringify(data)); cachedData = data; } if (typeof module !== "undefined") { module.exports = { loadPortfolioData, savePortfolioData }; } document.addEventListener('DOMContentLoaded', () => { const summary = document.getElementById('dashboardSummary'); if (!summary) return; try { const { marks, portfolio } = loadPortfolioData(); const codes = Object.keys(portfolio); const holdings = codes.length ? codes.join(', ') : 'none yet'; const fragment = document.createDocumentFragment(); const fundsP = document.createElement('p'); fundsP.textContent = 'Available Funds: '; const marksStrong = document.createElement('strong'); marksStrong.textContent = `â‚¥${marks.toFixed(2)}`; fundsP.appendChild(marksStrong); const holdingsP = document.createElement('p'); holdingsP.textContent = 'Current Holdings: '; const holdingsEm = document.createElement('em'); holdingsEm.textContent = holdings; holdingsP.appendChild(holdingsEm); fragment.append(fundsP, holdingsP); summary.textContent = ''; summary.appendChild(fragment); } catch (e) { summary.textContent = 'Unable to load portfolio data.'; } });